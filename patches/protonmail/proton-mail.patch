diff --git a/packages/components/containers/login/MinimalLoginContainer.tsx b/packages/components/containers/login/MinimalLoginContainer.tsx
index 6fef05c..1719cc8 100644
--- a/packages/components/containers/login/MinimalLoginContainer.tsx
+++ b/packages/components/containers/login/MinimalLoginContainer.tsx
@@ -25,6 +25,8 @@ import AbuseModal from './AbuseModal';
 import { AuthActionResponse, AuthCacheResult, AuthStep } from './interface';
 import { handleLogin, handleTotp, handleUnlock } from './loginActions';

+const ELECTRON_MAIL_FORM_STYLE = { padding: '0.8rem' } as const;
+
 const UnlockForm = ({
     onSubmit,
     cancelButton,
@@ -43,6 +45,7 @@ const UnlockForm = ({
                 withLoading(onSubmit(keyPassword)).catch(noop);
             }}
             method="post"
+            style={ELECTRON_MAIL_FORM_STYLE}
         >
             <Label htmlFor="password">{c('Label').t`Mailbox password`}</Label>
             <div className="mb1">
@@ -87,6 +90,7 @@ const TOTPForm = ({
                 withLoading(onSubmit(totp)).catch(noop);
             }}
             method="post"
+            style={ELECTRON_MAIL_FORM_STYLE}
         >
             <Label htmlFor="twoFa">{c('Label').t`Two-factor authentication code`}</Label>
             <div className="mb1">
@@ -165,6 +169,7 @@ const LoginForm = ({
                     withLoading(run()).catch(noop);
                 }}
                 method="post"
+                style={ELECTRON_MAIL_FORM_STYLE}
             >
                 {hasChallenge && (
                     <Challenge

diff --git a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
index 3f222f7..98e9cfe 100644
--- a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
+++ b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
@@ -200,7 +200,7 @@ const MailboxContainer = ({
     );

     return (
-        <div ref={elementRef} tabIndex={-1} className="flex-item-fluid flex flex-column flex-nowrap no-outline">
+        <div ref={elementRef} tabIndex={-1} className="flex-item-fluid flex flex-column flex-nowrap no-outline electron-mail-mailbox-container-component">
             {showToolbar && (
                 <Toolbar
                     labelID={labelID}

diff --git a/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx b/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
index 47b6e1e6f..989a1d771 100644
--- a/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
+++ b/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
@@ -172,7 +172,7 @@ const AdvancedSearchDropdown = ({ keyword: fullInput = '', isNarrow }: Props) =>
         loadingLabels || loadingFolders || loadingMailSettings || loadingESFeature || loadingScheduledFeature;

     // Switches
-    const showEncryptedSearch = !isMobile() && !!esFeature && !!esFeature.Value && !!isPaid(user);
+    const showEncryptedSearch = false;
     const showAdvancedSearch = !showEncryptedSearch || showMore;
     const dropdownSearchButtonProps = {
         ref: anchorRef,

diff --git a/applications/mail/src/app/containers/EncryptedSearchProvider.tsx b/applications/mail/src/app/containers/EncryptedSearchProvider.tsx
index 444313146..4ed701c49 100644
--- a/applications/mail/src/app/containers/EncryptedSearchProvider.tsx
+++ b/applications/mail/src/app/containers/EncryptedSearchProvider.tsx
@@ -717,125 +717,7 @@ const EncryptedSearchProvider = ({ children }: Props) => {
     /**
      * Execute an encrypted search
      */
-    const encryptedSearch: EncryptedSearch = async (labelID, setCache) => {
-        // Prevent old searches from interfering with newer ones
-        abortSearchingRef.current.abort();
-        setESStatus((esStatus) => {
-            return {
-                ...esStatus,
-                isSearching: false,
-                isSearchPartial: false,
-            };
-        });
-
-        const t1 = performance.now();
-        const {
-            dbExists,
-            esEnabled,
-            previousNormSearchParams,
-            permanentResults,
-            isSearchPartial: wasSearchPartial,
-            cachedIndexKey,
-            isCaching,
-            isFirstSearch,
-        } = esStatus;
-
-        if (!dbExists || !esEnabled) {
-            return false;
-        }
-
-        const isIDBIntact = await canUseES(userID);
-        if (!isIDBIntact) {
-            return dbCorruptError().then(() => false);
-        }
-
-        abortSearchingRef.current = new AbortController();
-
-        // Caching needs to be triggered here for when a refresh happens on a search URL
-        if (!isCaching && !esCacheRef.current.isCacheReady) {
-            void cacheIndexedDB();
-        }
-
-        const { searchParameters, filterParameter, sortParameter } = parseSearchParams(history.location);
-        const normalisedSearchParams = normaliseSearchParams(searchParameters, labelID, filterParameter, sortParameter);
-
-        // In case only sorting changed, for complete searches it doesn't make sense to perform a new search
-        if (!wasSearchPartial && previousNormSearchParams) {
-            const shouldSortOnly = shouldOnlySortResults(normalisedSearchParams, previousNormSearchParams);
-            if (shouldSortOnly) {
-                setCache(permanentResults, pageRef.current);
-                return true;
-            }
-        }
-
-        setESStatus((esStatus) => {
-            return {
-                ...esStatus,
-                isSearching: true,
-                isSearchPartial: true,
-                isFirstSearch: false,
-            };
-        });
-
-        const controlledSetCache = (Elements: Element[]) => {
-            if (!abortSearchingRef.current.signal.aborted) {
-                setCache(Elements, pageRef.current);
-            }
-        };
-
-        let searchResults: ESMessage[] = [];
-        let isSearchPartial = false;
-        let lastEmail: LastEmail | undefined;
-        try {
-            ({ searchResults, isSearchPartial, lastEmail } = await hybridSearch(
-                esCacheRef,
-                normalisedSearchParams,
-                cachedIndexKey,
-                getUserKeys,
-                userID,
-                controlledSetCache,
-                abortSearchingRef
-            ));
-        } catch (error: any) {
-            esSentryReport('encryptedSearch: hybridSearch', { error });
-            // If the key is the problem, then we want to wipe the DB and fall back to
-            // server-side search, otherwise we want to show a generic error and still
-            // fall back to server-side search
-            if (error.message === 'Key not found') {
-                return dbCorruptError().then(() => false);
-            }
-            throw error;
-        }
-
-        if (!abortSearchingRef.current.signal.aborted) {
-            setESStatus((esStatus) => {
-                return {
-                    ...esStatus,
-                    permanentResults: searchResults,
-                    labelID,
-                    setElementsCache: setCache,
-                    lastEmail,
-                    previousNormSearchParams: normalisedSearchParams,
-                    page: 0,
-                    isSearchPartial,
-                    isSearching: false,
-                };
-            });
-            setCache(searchResults, pageRef.current);
-
-            const t2 = performance.now();
-            void sendSearchingMetrics(
-                api,
-                userID,
-                esCacheRef.current.cacheSize,
-                Math.ceil(t2 - t1),
-                isFirstSearch,
-                esCacheRef.current.isCacheLimited
-            );
-        }
-
-        return true;
-    };
+    const encryptedSearch: EncryptedSearch = async (labelID, setCache) => false;

     /**
      * Increase the number of results in case the cache is limited as the user changes page

diff --git a/applications/mail/src/app/App.tsx b/applications/mail/src/app/App.tsx
index 81c6135be..cdd17853a 100644
--- a/applications/mail/src/app/App.tsx
+++ b/applications/mail/src/app/App.tsx
@@ -12,7 +12,6 @@ import * as config from './config';
 import PrivateApp from './PrivateApp';

 import './app.scss';
-import { registerMailToProtocolHandler } from './helpers/url';

 const locales = initLocales(require.context('../../locales', true, /.json$/, 'lazy'));

@@ -24,11 +23,6 @@ const enhancedConfig = {
 newVersionUpdater(enhancedConfig);
 sentry(enhancedConfig);

-// If the browser is Chromium based, register automatically the mailto protocol handler
-if ('chrome' in window) {
-    registerMailToProtocolHandler();
-}
-
 const App = () => {
     const [hasInitialAuth] = useState(() => {
         return !window.location.pathname.startsWith(G_OAUTH_REDIRECT_PATH);

diff --git a/applications/mail/src/app/helpers/message/messageDecrypt.ts b/applications/mail/src/app/helpers/message/messageDecrypt.ts
index d135a42fd..0c01fb0a0 100644
--- a/applications/mail/src/app/helpers/message/messageDecrypt.ts
+++ b/applications/mail/src/app/helpers/message/messageDecrypt.ts
@@ -141,12 +141,12 @@ const decryptLegacyMessage = async (message: Message, privateKeys: OpenPGPKey[])
  * Willingly not dealing with public keys and signature verification
  * It will be done separately when public keys will be ready
  */
-export const decryptMessage = async (
+export const decryptMessage = async ( /* electron-mail mark */
     message: Message,
     privateKeys: OpenPGPKey[],
     getAttachment?: (ID: string) => DecryptResultPmcrypto | undefined,
     onUpdateAttachment?: (ID: string, attachment: DecryptResultPmcrypto) => void
-): Promise<DecryptMessageResult> => {
+): Promise<DecryptMessageResult> => { /* electron-mail mark */
     if (isMIME(message)) {
         return decryptMimeMessage(message, privateKeys, getAttachment, onUpdateAttachment);
     }

diff --git a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
index aff462ffb..dc1b62d4a 100644
--- a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
+++ b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
@@ -44,12 +44,12 @@ export const getRequest = ({ ID = '' }: Attachment = {}, api: Api): Promise<Arra
     return api(getAttachment(ID));
 };

-export const getDecryptedAttachment = async (
+export const getDecryptedAttachment = async ( /* electron-mail mark */
     attachment: Attachment,
     verification: MessageVerification | undefined,
     messageKeys: MessageKeys,
     api: Api
-): Promise<DecryptResultPmcrypto> => {
+): Promise<DecryptResultPmcrypto> => { /* electron-mail mark */
     const encryptedBinary = await getRequest(attachment, api);
     try {
         const sessionKey = await getSessionKey(attachment, messageKeys.privateKeys);

diff --git a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
index 4c16c85b5..8b93c6084 100644
--- a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
+++ b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
@@ -10,7 +10,7 @@ export type UseGetMessageKeys = () => GetMessageKeys;
 /**
  * Add user public and private keys to the MessageExtended if not already there
  */
-export const useGetMessageKeys: UseGetMessageKeys = () => {
+export const useGetMessageKeys: UseGetMessageKeys = () => { /* electron-mail mark */
     const getAddressKeys = useGetAddressKeys();

     return useCallback(
@@ -20,4 +20,4 @@ export const useGetMessageKeys: UseGetMessageKeys = () => {
         },
         [getAddressKeys]
     );
-};
+}; /* electron-mail mark */

diff --git a/packages/components/hooks/useGetEncryptionPreferences.ts b/packages/components/hooks/useGetEncryptionPreferences.ts
index fe83b9e8c..b944a61e8 100644
--- a/packages/components/hooks/useGetEncryptionPreferences.ts
+++ b/packages/components/hooks/useGetEncryptionPreferences.ts
@@ -24,7 +24,7 @@ const DEFAULT_LIFETIME = 5 * MINUTE;
  * The logic for how those preferences are determined is laid out in the
  * Confluence document 'Encryption preferences for outgoing email'
  */
-const useGetEncryptionPreferences = () => {
+const useGetEncryptionPreferences = () => { /* electron-mail mark */
     const api = useApi();
     const cache = useCache();
     const getAddresses = useGetAddresses();
@@ -87,6 +87,6 @@ const useGetEncryptionPreferences = () => {
         },
         [cache, getEncryptionPreferences]
     );
-};
+}; /* electron-mail mark */

 export default useGetEncryptionPreferences;

diff --git a/packages/components/hooks/useApi.ts b/packages/components/hooks/useApi.ts
index e2baface5..8b4317d5a 100644
--- a/packages/components/hooks/useApi.ts
+++ b/packages/components/hooks/useApi.ts
@@ -3,8 +3,8 @@ import { Api } from '@proton/shared/lib/interfaces';

 import ContextApi from '../containers/api/apiContext';

-const useApi = (): Api => {
+const useApi = (): Api => { /* electron-mail mark */
     return useContext(ContextApi);
-};
+}; /* electron-mail mark */

 export default useApi;

diff --git a/packages/components/hooks/useAuthentication.ts b/packages/components/hooks/useAuthentication.ts
index feb92a8af..d802ae8ae 100644
--- a/packages/components/hooks/useAuthentication.ts
+++ b/packages/components/hooks/useAuthentication.ts
@@ -3,9 +3,9 @@ import { useContext } from 'react';
 import AuthenticationContext from '../containers/authentication/authenticationContext';
 import { PrivateAuthenticationStore } from '../containers/app/interface';

-const useAuthentication = () => {
+const useAuthentication = () => { /* electron-mail mark */
     // Force private authentication store because the public app is a special case
     return useContext(AuthenticationContext) as PrivateAuthenticationStore;
-};
+}; /* electron-mail mark */

 export default useAuthentication;

diff --git a/packages/components/hooks/useCache.ts b/packages/components/hooks/useCache.ts
index 35d7a0aba..352f1c8a3 100644
--- a/packages/components/hooks/useCache.ts
+++ b/packages/components/hooks/useCache.ts
@@ -3,7 +3,7 @@ import { useContext } from 'react';

 import Context from '../containers/cache/cacheContext';

-const useCache = <K = string, V = any>() => {
+const useCache = <K = string, V = any>() => { /* electron-mail mark */
     const cache = useContext(Context);

     if (!cache) {
@@ -11,6 +11,6 @@ const useCache = <K = string, V = any>() => {
     }

     return cache as Cache<K, V>;
-};
+}; /* electron-mail mark */

 export default useCache;
